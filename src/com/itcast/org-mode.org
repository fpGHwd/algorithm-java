* java

  https://www.youtube.com/watch?v=2TpBUGjCAag&list=PLvG_lDGI8Su3Rdfb8UNyloTqeKtF-yPdc&index=2

** 网络编程概述
** 网络编程概述2
   :LOGBOOK:
   CLOCK: [2019-04-16 Tue 14:56]
   :END:

** 补码与同余
* es6 YouTube
* TODO Java bilibili
** DONE Java环境搭建
** TODO 位运算
** TODO 语句
** DONE 函数
*** 函数 重载 重载提升代码的可用性
*** 重载练习 如何让重载：参数不一样（参数类型不同或者参数个数不同）
** DONE 数组
*** DONE 数组 概述 内存结构
**** 如何衡量自己需要看视频的程度。这是一个关键的概念。需要用自己的一些数据来衡量
**** new在堆中分配内存空间
*** DONE 数组 静态初始化
**** 数组脚标越界异常
*** DONE 数组 遍历
**** 打印数组引用[I@de6ced
***** 中括号数组，I是指数组，@后数组是地址的某个hash值
**** array.length
*** DONE 数组 获取最值
*** DONE 数组 十进制-二进制
**** 打印二进制和计算过程有个反的关系。用到StringBuffer的reverse可以解决
*** DONE 数组 十进制转十六进制
**** 有位运算
***** 无符号右移>>>
**** 位运算次数 就是循环次数 和数的位数有关系
**** 利用StringBuffer反转
*** DONE 数组 查表法十六进制-十进制
**** 表：数组相关的表，数组索引是值，数组元素是char型结果
**** 查 hash过程
**** 负数取反也是没有问题的
*** DONE 数组 查表十进制-二进制
**** 负数的二进制体现 当然移位时最好的
**** 操作位直接移位就行
**** 原码-反码-补码（反码+1）
**** 可将2进制函数改写成活重载成16进制
***** 抽取共同片段作为片段函数
*** DONE 数组 二维数组

还是得看视频啊，啥都要跟人学个大概，然后自己去挖别人没有搞清楚或者讲清楚的事情

**** 二维数组的格式 [[I@c17164
**** 默认初始化值 int[][] arr = new int[3][0]; arr[0] = null
**** 数组这一块都要分析栈和堆的分配状态
**** 数组中的数组的分配方法 不规则数组的分配方法
**** 学习语言过程中也要找到20%的时间学到80%功能的这一安排。 这是非常重要的，比如看视频就是的
**** 而为数组的length 两层
**** 什么时候定义二维数组？ 现在积极回答这样的问题
***** 公司有三个销售组 {{2,3,8,5},{},{}} 最外面时公司，里面是组，数字是销售额
**** 二维数组用索引作为小组，什么时候可以用 甲 乙 丙 作为小组呢？后面的容器（map）
*** DONE 数组 二维数组练习
**** int[] y[];  // imperfect practice
**** 中括号跟类型走，和跟变量走的效用不一样
** TODO 面向对象
*** DONE 面向对象 概述
**** 语法以外的也是核心的一部分
**** 一种思想 面向过程 面向对象
***** 冰箱装大象 几步
**** 画图的思考方法也不错
**** 找到东西，功能都在了，更方便：以前面对很多的动作，现在只要面对一个事物。
***** 执行者到指挥者。其实面向过程也可以有面向对象的思维的。只是没有提出面向对象之前难以构造和生成这样的概念
**** 人开门这个动作，这个开，是应该属于人呢，还是属于门呢？ 当然是一个智能的🚪自己开比较高。
**** 面向对象只是对面向过程的封装
*** DONE 面向对象 举例
**** 万物皆对象 万物皆数
***** 万物皆时空，皆CPU
**** 落实到程序中先要面向对象，对象需要什么功能就写到对象里面去
***** 找到对象了，功能就找到了。功能即对象，对象即功能。只不过对象更简洁和抽象
***** 解决问题的时候，先找人
*** DONE 类与对象的关系
**** 名词提炼法 对象 类
**** 人的抽象本质 禁止拖泥带水 决定了对象有更多的功能 和智能化
**** 面向对象三个特征：封装、继承、多态
**** 引用型变量 包括 数组型和类类型变量
*** DONE 匿名对象的应用
**** 匿名对象和非匿名对象的区别：匿名对象只能调用一次成员 注意函数的布局
**** 匿名对象 有显式的名字了 就不是垃圾了
**** 强引用 弱引用 虚引用
**** q = null; 明确成为垃圾
*** DONE 封装概述
**** 函数就是代码中最小的封装体
*** DONE 封装 private
**** 基础就是80%，要用20%时间去学基础，就是用视频最好
*** TODO 构造函数
*** DONE 构造代码块 给类初始化，共性初始化
*** DONE this关键字 代表调用this函数所属的对象
**** 函数也是被对象调用 成员体现这一点
*** DONE this关键字的应用
**** this是调用对象的引用
*** DONE this关键字在构造函数间调用
**** 看视频是20%，自己看书应该属于80%的实践，不要搞错了
**** 复用构造函数 构造函数间调用只能用this语句：this()或者this(name)
**** this语句只能定义在构造函数第一行
***** 初始化先执行构造函数初始化
*** DONE static关键字
**** 若相关
***** 只能修饰成员不能修饰局部
***** 不仅可以被对象，还可以被类名调用
***** 传智播客的同学们共享一个饮水机
***** 特有内容随着对象存储
***** 特殊的内存：方法区/数据区/共享区，方法，共享数据
**** 关键
***** 随着类加载而加载
****** 类进内存时，已经为static内容开辟好空间
****** static随着类的消失而消失
***** 优先对象存在
***** 所有对象共享
**** 问题 无法从静态上下文中获取非静态变量
***** 调用静态方法是没有对象的。没有创建对象的时候使用静态方法调用了实例属性就会报这个错误
***** 内存中不存在对象，也不存在实例属性
***** 静态方法只能访问静态成员
***** 静态方法中不能出现this字样
***** 静态方法不能定义this super字样
*** DONE main函数
**** 主函数修饰符
***** public 访问权限最大
***** static 随着类加载就存在了
***** void
***** main
***** String[] args 的意义来类似理解：命令行如何转化到参数
***** 重载main调用的还是参数类型为String[] 的main函数
***** 虚拟机要的主函数形式很确定
*** DONE 静态什么时候使用
**** 静态变量：共享数据
**** DONE 静态函数：功能内部没有访问到 对象特有数据 或 非静态成员
*** DONE 静态的应用 工具类
**** 应用程序中共用的功能
**** 理解后的可取代的代码是指数级
**** 自动编译
**** 指定目录和当前目录
**** 没有必要创建对象再使用类
***** 对象是封装数据的
***** 防止别人建立工具类对象，私有化构造函数 浪费堆内存
****** 为什么构造函数私有化
***** swap 不提供数据 能隐藏的隐藏 只暴露你需要的
*** DONE 帮助文档制作javadoc
**** 工具类的分发
**** java API 文档
**** C语言和Linux以后也多看看视频。工具都用视频解决，然后工作化为工具解决。其他就是或看书，或工具解决。
**** 另外，分析时候文档的作用。逐渐提升起来。很能让自己提升分析能力。 线性分析能力，即文本撰写能力和应用。
*** DONE 静态代码块
**** 角度出发/线性区分/就是这里啊/突然有一种万物皆字的感觉/融会贯通
***** 作用角度
****** 适用的业务场景
***** 代码角度
****** 随着类加载执行，只执行一次（加载一般堆代码而言，所以其实空间归类就是广义抽象）
***** 编写者角度
****** 选择时机编写和更好编写，也可为代码阶段
**** 考题
***** 静态代码块 给 类初始化
***** 构造代码块 给 堆初始化
***** 构造函数
*** DONE 对象的初始化过程
**** 栈区
***** 0，栈中有Ｐ
***** 1，加载.class文件到内存中（在这步之前栈中有p了
**** 方法区 方法区优先于对象存在
***** 2'静态代码块 类初始化
**** 堆区
***** 3，开辟堆区域 获取内存地址
***** 4，建立对象特有属性 默认初始化特有属性
***** 5，特有属性初始化 显性初始化
***** 6，构造代码块初始化
***** 7，构造函数初始化
**** 栈区
***** 8，对象 引用赋值
*** DONE 对象调用成员过程
**** 对象调用
**** 成员
**** 从堆和栈分析
*** DONE 单例设计模式 自己说清楚才是最重要的
**** 设计模式与框架
*** DONE 单例设计模式二 写就是为了用单例 所以饿汉式比较好
**** 饿汉式
**** 懒汉式 延迟加载 懒 就是 延迟
**** 饿汉式 多线程下是没有问题的 懒汉式代码比较多
***** 第一遍看视频 达到的效果 以后看到知道就行了 不要求会写
***** 读书笔记 是 阅读 和 写作 之间的桥梁
*** DONE 继承 概述一
**** 继承 共性 代码复用 成本 面向代码编写者 子继承父关键是继承
***** 有关系 继承
***** 不要为了获取类功能和简化代码去继承 而是有 所属关系 is a
**** 面向对象是一种思想
**** 类本身就是抽象行为 高级抽象类
*** 继承 概述二
*** 异常 概述